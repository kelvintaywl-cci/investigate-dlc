version: 2.1

orbs:
  aws-ecr:
    version: 2.1
    description: |
        Build images and push them to the Amazon Elastic Container Registry.
    display:
        home_url: https://aws.amazon.com/ecr/
        source_url: https://github.com/CircleCI-Public/aws-ecr-orb
    orbs:
        aws-cli: circleci/aws-cli@3.1.3
    commands:
        build-image:
            description: Build a docker image with Docker Buildx
            parameters:
                dockerfile:
                    default: Dockerfile
                    description: Name of dockerfile to use. Defaults to Dockerfile.
                    type: string
                extra-build-args:
                    default: ""
                    description: |
                        Extra flags to pass to docker build. For examples, see https://docs.docker.com/engine/reference/commandline/buildx
                    type: string
                lifecycle-policy-path:
                    default: ""
                    description: |
                        The path to the .json file containing the lifecycle policy to be applied to a specified repository in AWS ECR.
                    type: string
                no-output-timeout:
                    default: 10m
                    description: The amount of time to allow the docker command to run before timing out.
                    type: string
                path:
                    default: .
                    description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
                    type: string
                platform:
                    default: linux/amd64
                    description: Platform targets for the docker image, multi arch images. Ex. linux/amd64,linux/arm64.
                    type: string
                profile-name:
                    default: default
                    description: |
                        AWS profile name to be configured. Only required when skip-when-tags-exist or ecr-login are set to true.
                    type: string
                public-registry:
                    default: false
                    description: Set to true if building and pushing an image to a Public Registry on ECR.
                    type: boolean
                push-image:
                    default: true
                    description: Set to false to build an image without pushing to repository.  Defaults to true.
                    type: boolean
                region:
                    default: ${AWS_REGION}
                    description: |
                        AWS region of ECR repository. Defaults to environment variable ${AWS_REGION}
                    type: string
                registry-id:
                    default: AWS_ECR_REGISTRY_ID
                    description: |
                        The 12 digit AWS Registry ID associated with the ECR account. This field is required
                    type: env_var_name
                repo:
                    description: Name of an Amazon ECR repository
                    type: string
                skip-when-tags-exist:
                    default: false
                    description: Whether to skip image building if all specified tags already exist in ECR
                    type: boolean
                tag:
                    default: latest
                    description: A comma-separated string containing docker image tags (default = latest)
                    type: string
            steps:
                - run:
                    command: |
                        #!/bin/bash
                        PARAM_REGION=$(eval echo "${PARAM_REGION}")
                        PARAM_REPO=$(eval echo "${PARAM_REPO}")
                        PARAM_TAG=$(eval echo "${PARAM_TAG}")
                        PARAM_ACCOUNT_URL="${!PARAM_REGISTRY_ID}.dkr.ecr.${PARAM_REGION}.amazonaws.com"
                        ECR_COMMAND="ecr"
                        number_of_tags_in_ecr=0
                        docker_tag_args="-t ${PARAM_REPO}:${PARAM_TAG}"

                        docker context create builder
                        docker run --privileged --rm tonistiigi/binfmt --install all
                        docker --context builder buildx create --use
                        docker --context builder buildx build \
                          -f "${PARAM_PATH}"/"${PARAM_DOCKERFILE}" \
                          ${docker_tag_args} \
                          --platform "${PARAM_PLATFORM}" \
                          --progress plain \
                          "$@" \
                          "${PARAM_PATH}"
                    environment:
                        PARAM_DOCKERFILE: <<parameters.dockerfile>>
                        PARAM_EXTRA_BUILD_ARGS: <<parameters.extra-build-args>>
                        PARAM_LIFECYCLE_POLICY_PATH: <<parameters.lifecycle-policy-path>>
                        PARAM_PATH: <<parameters.path>>
                        PARAM_PLATFORM: <<parameters.platform>>
                        PARAM_PROFILE_NAME: <<parameters.profile-name>>
                        PARAM_PUBLIC_REGISTRY: <<parameters.public-registry>>
                        PARAM_PUSH_IMAGE: <<parameters.push-image>>
                        PARAM_REGION: <<parameters.region>>
                        PARAM_REGISTRY_ID: <<parameters.registry-id>>
                        PARAM_REPO: << parameters.repo >>
                        PARAM_SKIP_WHEN_TAGS_EXIST: <<parameters.skip-when-tags-exist>>
                        PARAM_TAG: << parameters.tag >>
                    name: Build Docker Image with buildx
                    no_output_timeout: <<parameters.no-output-timeout>>

parameters:
  use-dlc:
    type: boolean
    default: true

commands:
  diagnose:
    steps:
      - run: docker version
      - run: docker info
      - run: docker system info
  clean-docker:
    steps:
      - run: sudo rm -rf /var/lib/docker/*
executors:
  main:
    machine:
      image: "ubuntu-2004:202107-02"
      docker_layer_caching: << pipeline.parameters.use-dlc >>

jobs:
  build_image:
    executor: main
    environment:
      AWS_ECR_REGISTRY_ID: '123456789012'
      AWS_REGION: 'ap-northeast-1'
    steps:
      - checkout
      - diagnose
      - aws-ecr/build-image:
          platform: linux/amd64,linux/arm64
          repo: kelvintaywlcircleci/fancy-nginx-xplatform
          tag: latest
          extra-build-args: |
            --progress plain
  clean_docker_image_cache:
    executor: main
    steps:
      - clean-docker

workflows:
  main:
    jobs:
      - build_image
      # - clean_docker_image_cache